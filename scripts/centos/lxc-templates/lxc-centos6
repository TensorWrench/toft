#!/bin/bash

echo "Creating centos6 node..."

configure_centos()
{
    rootfs=$1
    hostname=$2

	# disable selinux in centos
    mkdir -p $rootfs/selinux
    echo 0 > $rootfs/selinux/enforce

	# add host root ssh access
    mkdir $rootfs/root/.ssh
    chmod 0600 $rootfs/root/.ssh
	cat <<-EOF > $rootfs/root/.ssh/authorized_keys
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDCguB7XL3ARzLZYLsIMZe4UUO371m+H5C6V8MhtmSlgXtgHDo7eZhNSm5zCeoyGd32OKeLxuxCCEkXfDDF1aa2a6twcASE3pmWNdnBS7auiOH4P7g+eQ4Aw9v7DdESbIVgHF/NDiAEFFdmApYNM3oCX2FhEVNVKxkkIokUr4axYFJzmJ6Xoi5Sd8JtPC85FZVXqDucZDnHQlOcCkbSo0UOmsWQGwtu8eUHoDeUG0dB8ntb9xlBeLctdrAPhuFYCX8IfFkdcakkzv61ETPbKE6g9wdTDC/TEep7/AHGYmarziRnwKiVOL1jnE1coOJLqy8wOC3dKGmRZy9D4sTc+FRV root insecure public key
	EOF

	# copy host resolve 
    cp /etc/resolv.conf $rootfs/etc/resolv.conf

	# add default route to host
	cat <<EOF > $rootfs/etc/rc.local
#!/bin/sh -e
route add default gw 192.168.20.1
exit 0
EOF

    # disable selinux in centos
    mkdir -p $rootfs/selinux
    echo 0 > $rootfs/selinux/enforce

    # set the hostname
    cat <<EOF > $rootfs/etc/hostname
$hostname
EOF
    # set minimal hosts
    cat <<EOF > $rootfs/etc/hosts
127.0.0.1 localhost $hostname
EOF

    # provide the lxc service
    cat <<EOF > $rootfs/etc/init/lxc.conf
# fake some events needed for correct startup other services

description     "Container Upstart"

start on startup

script
        rm -rf /var/run/*.pid
        rm -rf /var/run/network/*
        /sbin/initctl emit stopped JOB=udevtrigger --no-wait
        /sbin/initctl emit started JOB=udev --no-wait
end script
EOF

    cat <<EOF > $rootfs/etc/init/console.conf
# console - getty
#
# This service maintains a console on tty1 from the point the system is
# started until it is shut down again.

start on stopped rc RUNLEVEL=[2345]
stop on runlevel [!2345]

respawn
exec /sbin/getty -8 38400 /dev/console
EOF
	
	mkdir -p $rootfs/lib/init
    cat <<EOF > $rootfs/lib/init/fstab
# /lib/init/fstab: lxc system fstab
none            /spu                      spufs           gid=spu,optional                  0 0
none            /tmp                      none            defaults                          0 0
none            /var/lock                 tmpfs           nodev,noexec,nosuid,showthrough   0 0
none            /lib/init/rw              tmpfs           mode=0755,nosuid,optional         0 0
EOF

	# reconfigure some services
	if [ -z "$LANG" ]; then
		chroot $rootfs locale-gen en_US.UTF-8
		chroot $rootfs update-locale LANG=en_US.UTF-8
	else
		chroot $rootfs locale-gen $LANG
		chroot $rootfs update-locale LANG=$LANG
	fi

	# remove pointless services in a container
	chroot $rootfs /usr/sbin/update-rc.d -f ondemand remove

	chroot $rootfs /bin/bash -c 'cd /etc/init; for f in $(ls u*.conf); do mv $f $f.orig; done'
	chroot $rootfs /bin/bash -c 'cd /etc/init; for f in $(ls tty[2-9].conf); do mv $f $f.orig; done'
	chroot $rootfs /bin/bash -c 'cd /etc/init; for f in $(ls plymouth*.conf); do mv $f $f.orig; done'
	chroot $rootfs /bin/bash -c 'cd /etc/init; for f in $(ls hwclock*.conf); do mv $f $f.orig; done'
	chroot $rootfs /bin/bash -c 'cd /etc/init; for f in $(ls module*.conf); do mv $f $f.orig; done'

	# fix the udev, from http://lxc.teegra.net/
	DEV=$rootfs/dev
	mv "${DEV}" "${DEV}.old"
	mkdir -p ${DEV}
	mknod -m 666 ${DEV}/null c 1 3
	mknod -m 666 ${DEV}/zero c 1 5
	mknod -m 666 ${DEV}/random c 1 8
	mknod -m 666 ${DEV}/urandom c 1 9
	mkdir -m 755 ${DEV}/pts
	mkdir -m 1777 ${DEV}/shm
	mknod -m 666 ${DEV}/tty c 5 0
	mknod -m 666 ${DEV}/tty0 c 4 0
	mknod -m 666 ${DEV}/tty1 c 4 1
	mknod -m 666 ${DEV}/tty2 c 4 2
	mknod -m 666 ${DEV}/tty3 c 4 3
	mknod -m 666 ${DEV}/tty4 c 4 4
	mknod -m 600 ${DEV}/console c 5 1
	mknod -m 666 ${DEV}/full c 1 7
	mknod -m 600 ${DEV}/initctl p
	mknod -m 666 ${DEV}/ptmx c 5 2
			
	# rm $rootfs/etc/mtab

	# change root password
    echo "Set root password to 'root'"
    echo "root:root" | chroot $rootfs chpasswd

    return 0
}

copy_centos()
{
    cache=$1
    arch=$2
    rootfs=$3

    # make a local copy of the minicentos
    echo "Extracting rootfs image to $rootfs ..."
    mkdir $rootfs
    tar zxf $cache/centos6-$arch.tar.gz -C $rootfs || return 1
    return 0
}

install_centos()
{
    cache="/var/cache/lxc/centos"
    rootfs=$1
    mkdir -p /var/lock/subsys/
    (
	flock -n -x 200
	if [ $? -ne 0 ]; then
	    echo "Cache repository is busy."
	    return 1
	fi

	arch=$(arch)
	if [ "$arch" == "i686" ]; then
	    arch=x86
	fi

	echo "Checking image cache in $cache/rootfs-$arch ... "
	if [ ! -e "$cache/rootfs-$arch" ]; then
	    if [ $? -ne 0 ]; then
		echo "Failed to download 'centos base'"
		return 1
	    fi
	fi

	copy_centos $cache $arch $rootfs
	if [ $? -ne 0 ]; then
	    echo "Failed to copy rootfs"
	    return 1
	fi

	return 0

	) 200>/var/lock/subsys/lxc

    return $?
}

copy_configuration()
{
    path=$1
    rootfs=$2
    name=$3

    cat <<EOF >> $path/config
lxc.utsname = $name

lxc.tty = 4
lxc.pts = 1024
lxc.rootfs = $rootfs
lxc.mount  = $path/fstab

lxc.cgroup.devices.deny = a

lxc.cgroup.devices.allow = b 1:0 rwm
lxc.cgroup.devices.allow = b 1:1 rwm
lxc.cgroup.devices.allow = c 1:1 rwm
lxc.cgroup.devices.allow = c 1:2 rwm
lxc.cgroup.devices.allow = c 1:4 rwm
lxc.cgroup.devices.allow = c 1:6 rwm
lxc.cgroup.devices.allow = c 1:7 rwm
lxc.cgroup.devices.allow = c 1:11 rwm

lxc.cgroup.devices.allow = c 2:* rwm
lxc.cgroup.devices.allow = c 3:* rwm

# /dev/null and zero
lxc.cgroup.devices.allow = c 1:3 rwm
lxc.cgroup.devices.allow = c 1:5 rwm
# consoles
lxc.cgroup.devices.allow = c 5:1 rwm
lxc.cgroup.devices.allow = c 5:0 rwm
lxc.cgroup.devices.allow = c 4:0 rwm
lxc.cgroup.devices.allow = c 4:1 rwm
# /dev/{,u}random
lxc.cgroup.devices.allow = c 1:9 rwm
lxc.cgroup.devices.allow = c 1:8 rwm
lxc.cgroup.devices.allow = c 136:* rwm
lxc.cgroup.devices.allow = c 5:2 rwm
# rtc
lxc.cgroup.devices.allow = c 254:0 rwm
EOF

    cat <<EOF > $path/fstab
proc            $rootfs/proc         proc    nodev,noexec,nosuid 0 0
devpts          $rootfs/dev/pts      devpts defaults 0 0
sysfs           $rootfs/sys          sysfs defaults  0 0
EOF

    if [ $? -ne 0 ]; then
		echo "Failed to add configuration"
		return 1
    fi

    return 0
}

clean()
{
    cache="/var/cache/lxc/centos"

    if [ ! -e $cache ]; then
	exit 0
    fi

    # lock, so we won't purge while someone is creating a repository
    (
	flock -n -x 200
	if [ $? != 0 ]; then
	    echo "Cache repository is busy."
	    exit 1
	fi

	echo -n "Purging the download cache..."
	rm --preserve-root --one-file-system -rf $cache && echo "Done." || exit 1
	exit 0

    ) 200>/var/lock/subsys/lxc
}

usage()
{
    cat <<EOF
$1 -h|--help -p|--path=<path> --clean
EOF
    return 0
}

options=$(getopt -o hp:n:c -l help,path:,name:,clean -- "$@")
if [ $? -ne 0 ]; then
    usage $(basename $0)
    exit 1
fi
eval set -- "$options"

while true
do
    case "$1" in
	-h|--help)      usage $0 && exit 0;;
	-p|--path)      path=$2; shift 2;;
	-n|--name)      name=$2; shift 2;;
	-c|--clean)     clean=$2; shift 2;;
	--)             shift 1; break ;;
        *)              break ;;
    esac
done

if [ ! -z "$clean" -a -z "$path" ]; then
    clean || exit 1
    exit 0
fi

if [ -z "$path" ]; then
    echo "'path' parameter is required"
    exit 1
fi

if [ "$(id -u)" != "0" ]; then
    echo "This script should be run as 'root'"
    exit 1
fi

rootfs=$path/rootfs

install_centos $rootfs
if [ $? -ne 0 ]; then
    echo "failed to install centos"
    exit 1
fi

configure_centos $rootfs $name
if [ $? -ne 0 ]; then
    echo "failed to configure centos for a container"
    exit 1
fi

copy_configuration $path $rootfs $name
if [ $? -ne 0 ]; then
    echo "failed write configuration file"
    exit 1
fi

if [ ! -z $clean ]; then
    clean || exit 1
    exit 0
fi
